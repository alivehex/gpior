<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\AliveHex\projects\GPIOR\examples\cpu\am1808\AM1806.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\AliveHex\projects\GPIOR\examples\cpu\am1808\AM1806.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Fri Aug 16 13:41:39 2013
<BR><P>
<H3>Maximum Stack Usage =         48 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Entry &rArr; CBootInit &rArr; SystemInit &rArr; MMU_init &rArr; CP15_EnableDcache &rArr; CP15_IsMMUEnabled
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8]">Entry</a>
 <LI><a href="#[a]">SWIHandler</a>
 <LI><a href="#[c]">IRQHandler</a>
 <LI><a href="#[d]">FIQHandler</a>
 <LI><a href="#[b]">AbortHandler</a>
 <LI><a href="#[9]">UndefInstHandler</a>
 <LI><a href="#[8b]">CP15_ReadID</a>
 <LI><a href="#[8c]">CP15_ReadCacheType</a>
 <LI><a href="#[8d]">CP15_ReadTCMStatus</a>
 <LI><a href="#[40]">CP15_ReadControl</a>
 <LI><a href="#[41]">CP15_WriteControl</a>
 <LI><a href="#[8e]">CP15_ReadTTB</a>
 <LI><a href="#[3b]">CP15_WriteTTB</a>
 <LI><a href="#[8f]">CP15_ReadDomainAccessControl</a>
 <LI><a href="#[3c]">CP15_WriteDomainAccessControl</a>
 <LI><a href="#[90]">CP15_ReadDFSR</a>
 <LI><a href="#[91]">CP15_ReadIFSR</a>
 <LI><a href="#[92]">CP15_ReadFAR</a>
 <LI><a href="#[93]">CP15_InvalidateIDcache</a>
 <LI><a href="#[4a]">CP15_InvalidateIcache</a>
 <LI><a href="#[4e]">CP15_InvalidateDcache</a>
 <LI><a href="#[94]">CP15_PrefetchIcacheLine</a>
 <LI><a href="#[52]">CP15_TestCleanInvalidateDcache</a>
 <LI><a href="#[53]">CP15_DrainWriteBuffer</a>
 <LI><a href="#[95]">CP15_WaitForInterrupt</a>
 <LI><a href="#[54]">CP15_InvalidateTLB</a>
 <LI><a href="#[96]">CP15_InvalidateTLBMVA</a>
 <LI><a href="#[97]">CP15_InvalidateITLB</a>
 <LI><a href="#[98]">CP15_InvalidateITLBMVA</a>
 <LI><a href="#[99]">CP15_InvalidateDTLB</a>
 <LI><a href="#[9a]">CP15_InvalidateDTLBMVA</a>
 <LI><a href="#[4f]">CP15_ReadDcacheLockdown</a>
 <LI><a href="#[50]">CP15_WriteDcacheLockdown</a>
 <LI><a href="#[4b]">CP15_ReadIcacheLockdown</a>
 <LI><a href="#[4c]">CP15_WriteIcacheLockdown</a>
 <LI><a href="#[9b]">CP15_ReadTLBLockdown</a>
 <LI><a href="#[9c]">CP15_WriteTLBLockdown</a>
 <LI><a href="#[9d]">CP15_ReadFCSE_PID</a>
 <LI><a href="#[9e]">CP15_WriteFCSE_PID</a>
 <LI><a href="#[9f]">CP15_ReadC5</a>
 <LI><a href="#[a0]">CP15_ReadC6</a>
 <LI><a href="#[a1]">CP15ICacheDisable</a>
 <LI><a href="#[a2]">CP15DCacheDisable</a>
 <LI><a href="#[a3]">CP15ICacheEnable</a>
 <LI><a href="#[a4]">CP15DCacheEnable</a>
 <LI><a href="#[a5]">CP15DCacheFlush</a>
 <LI><a href="#[55]">CP15DCacheClean</a>
 <LI><a href="#[a6]">CP15ICacheFlush</a>
 <LI><a href="#[a7]">CP15ICacheFlushBuff</a>
 <LI><a href="#[a8]">CP15DCacheCleanBuff</a>
 <LI><a href="#[a9]">CP15TtbSet</a>
 <LI><a href="#[aa]">CP15MMUDisable</a>
 <LI><a href="#[ab]">CP15MMUEnable</a>
 <LI><a href="#[1e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">AbortHandler</a> from exceptionhandler.o(EXCEPTIONS) referenced from startup.o(.constdata)
 <LI><a href="#[7]">CPUAbortHandler</a> from cpu.o(.text) referenced from exceptionhandler.o(EXCEPTIONS)
 <LI><a href="#[8]">Entry</a> from init.o(INIT) referenced from startup.o(.constdata)
 <LI><a href="#[d]">FIQHandler</a> from exceptionhandler.o(EXCEPTIONS) referenced from startup.o(.constdata)
 <LI><a href="#[c]">IRQHandler</a> from exceptionhandler.o(EXCEPTIONS) referenced from startup.o(.constdata)
 <LI><a href="#[6]">IntDefaultHandler</a> from interrupt.o(.text) referenced from interrupt.o(.text)
 <LI><a href="#[a]">SWIHandler</a> from exceptionhandler.o(EXCEPTIONS) referenced from startup.o(.constdata)
 <LI><a href="#[9]">UndefInstHandler</a> from exceptionhandler.o(EXCEPTIONS) referenced from startup.o(.constdata)
 <LI><a href="#[5]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8]"></a>Entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Entry &rArr; CBootInit &rArr; SystemInit &rArr; MMU_init &rArr; CP15_EnableDcache &rArr; CP15_IsMMUEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBootInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata)
</UL>
<P><STRONG><a name="[e]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBootInit
</UL>

<P><STRONG><a name="[10]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[12]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[56]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[57]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[16]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[58]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[59]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[5a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[5b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[5c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[5d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[5e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[60]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[61]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[62]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[63]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[64]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[65]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[66]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[67]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[68]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[69]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[6c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[6d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[6e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[6f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[70]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[71]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[11]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[72]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[13]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[73]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[17]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[74]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[20]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[19]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[75]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1b]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>

<P><STRONG><a name="[5]"></a>main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[14]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[18]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[76]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[77]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>CBootInit</STRONG> (ARM, 44 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = CBootInit &rArr; SystemInit &rArr; MMU_init &rArr; CP15_EnableDcache &rArr; CP15_IsMMUEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCfgRegistersUnlock
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyVectorTable
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Entry
</UL>

<P><STRONG><a name="[78]"></a>BootAbort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>PSCModuleControl</STRONG> (ARM, 260 bytes, Stack size 20 bytes, psc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PSCModuleControl
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupAINTCInt
</UL>

<P><STRONG><a name="[79]"></a>IntRegister</STRONG> (ARM, 12 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>IntUnRegister</STRONG> (ARM, 16 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>IntChannelSet</STRONG> (ARM, 16 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>IntChannelGet</STRONG> (ARM, 20 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>IntGlobalEnable</STRONG> (ARM, 16 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupAINTCInt
</UL>

<P><STRONG><a name="[7d]"></a>IntGlobalDisable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>IntSystemEnable</STRONG> (ARM, 32 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>IntSystemDisable</STRONG> (ARM, 28 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>IntSystemStatusClear</STRONG> (ARM, 28 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>IntSystemStatusRawGet</STRONG> (ARM, 32 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>IntSystemStatusEnabledGet</STRONG> (ARM, 32 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>IntIRQEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupAINTCInt
</UL>

<P><STRONG><a name="[83]"></a>IntIRQDisable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>IntFIQEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupAINTCInt
</UL>

<P><STRONG><a name="[84]"></a>IntFIQDisable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>IntAINTCInit</STRONG> (ARM, 116 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupAINTCInt
</UL>

<P><STRONG><a name="[24]"></a>IntMasterIRQEnable</STRONG> (ARM, 12 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterIRQEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUirqe
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupAINTCInt
</UL>

<P><STRONG><a name="[2d]"></a>IntMasterIRQDisable</STRONG> (ARM, 12 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUirqd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[2f]"></a>IntMasterFIQEnable</STRONG> (ARM, 12 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUfiqe
</UL>

<P><STRONG><a name="[31]"></a>IntMasterFIQDisable</STRONG> (ARM, 12 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUfiqd
</UL>

<P><STRONG><a name="[33]"></a>IntMasterStatusGet</STRONG> (ARM, 12 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[35]"></a>IntDisable</STRONG> (ARM, 24 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterStatusGet
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterIRQDisable
</UL>

<P><STRONG><a name="[36]"></a>IntEnable</STRONG> (ARM, 24 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterIRQEnable
</UL>

<P><STRONG><a name="[29]"></a>MMU_init</STRONG> (ARM, 372 bytes, Stack size 24 bytes, mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = MMU_init &rArr; CP15_EnableDcache &rArr; CP15_IsMMUEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteTTB
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteDomainAccessControl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableMMU
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableIcache
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableDcache
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableMMU
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableIcache
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableDcache
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ConfigSR
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2a]"></a>SysCfgRegistersUnlock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, joy_syscfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBootInit
</UL>

<P><STRONG><a name="[85]"></a>SysCfgRegistersLock</STRONG> (ARM, 20 bytes, Stack size 0 bytes, joy_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via BLX)
</UL>

<P><STRONG><a name="[86]"></a>CPUSwitchToPrivilegedMode</STRONG> (ARM, 12 bytes, Stack size 4 bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>CPUSwitchToUserMode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>CPUAbortHandler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> exceptionhandler.o(EXCEPTIONS)
</UL>
<P><STRONG><a name="[34]"></a>CPUIntStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterStatusGet
</UL>

<P><STRONG><a name="[2e]"></a>CPUirqd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterIRQDisable
</UL>

<P><STRONG><a name="[2c]"></a>CPUirqe</STRONG> (ARM, 16 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterIRQEnable
</UL>

<P><STRONG><a name="[32]"></a>CPUfiqd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterFIQDisable
</UL>

<P><STRONG><a name="[30]"></a>CPUfiqe</STRONG> (ARM, 16 bytes, Stack size 0 bytes, cpu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterFIQEnable
</UL>

<P><STRONG><a name="[3a]"></a>CP15_ConfigSR</STRONG> (ARM, 72 bytes, Stack size 16 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CP15_ConfigSR
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
</UL>

<P><STRONG><a name="[42]"></a>CP15_ConfigRR</STRONG> (ARM, 48 bytes, Stack size 16 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>

<P><STRONG><a name="[43]"></a>CP15_EnableWB</STRONG> (ARM, 28 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>

<P><STRONG><a name="[44]"></a>CP15_DisableWB</STRONG> (ARM, 28 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>

<P><STRONG><a name="[45]"></a>CP15_ARMVCT_high</STRONG> (ARM, 28 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>

<P><STRONG><a name="[46]"></a>CP15_IsIcacheEnabled</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>

<P><STRONG><a name="[3e]"></a>CP15_EnableIcache</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CP15_EnableIcache
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
</UL>

<P><STRONG><a name="[38]"></a>CP15_DisableIcache</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CP15_DisableIcache
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
</UL>

<P><STRONG><a name="[47]"></a>CP15_IsMMUEnabled</STRONG> (ARM, 20 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CP15_IsMMUEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableDcache
</UL>

<P><STRONG><a name="[3d]"></a>CP15_EnableMMU</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CP15_EnableMMU
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
</UL>

<P><STRONG><a name="[37]"></a>CP15_DisableMMU</STRONG> (ARM, 40 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CP15_DisableMMU
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
</UL>

<P><STRONG><a name="[48]"></a>CP15_IsDcacheEnabled</STRONG> (ARM, 20 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>

<P><STRONG><a name="[3f]"></a>CP15_EnableDcache</STRONG> (ARM, 48 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CP15_EnableDcache &rArr; CP15_IsMMUEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_IsMMUEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
</UL>

<P><STRONG><a name="[39]"></a>CP15_DisableDcache</STRONG> (ARM, 36 bytes, Stack size 8 bytes, cp15.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CP15_DisableDcache
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteControl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadControl
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ShutdownDcache
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
</UL>

<P><STRONG><a name="[49]"></a>CP15_LockIcache</STRONG> (ARM, 56 bytes, Stack size 16 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteIcacheLockdown
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadIcacheLockdown
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_InvalidateIcache
</UL>

<P><STRONG><a name="[4d]"></a>CP15_LockDcache</STRONG> (ARM, 56 bytes, Stack size 16 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_WriteDcacheLockdown
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ReadDcacheLockdown
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_InvalidateDcache
</UL>

<P><STRONG><a name="[51]"></a>CP15_ShutdownDcache</STRONG> (ARM, 24 bytes, Stack size 8 bytes, cp15.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_TestCleanInvalidateDcache
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_InvalidateTLB
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DrainWriteBuffer
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableDcache
</UL>

<P><STRONG><a name="[88]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>SWIHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exceptionhandler.o(EXCEPTIONS))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata)
</UL>
<P><STRONG><a name="[c]"></a>IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exceptionhandler.o(EXCEPTIONS))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata)
</UL>
<P><STRONG><a name="[d]"></a>FIQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exceptionhandler.o(EXCEPTIONS))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata)
</UL>
<P><STRONG><a name="[b]"></a>AbortHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exceptionhandler.o(EXCEPTIONS))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata)
</UL>
<P><STRONG><a name="[9]"></a>UndefInstHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, exceptionhandler.o(EXCEPTIONS))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>CP15_ReadID</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[8c]"></a>CP15_ReadCacheType</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[8d]"></a>CP15_ReadTCMStatus</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[40]"></a>CP15_ReadControl</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_IsDcacheEnabled
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_IsMMUEnabled
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_IsIcacheEnabled
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ARMVCT_high
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableWB
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableWB
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ConfigRR
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableMMU
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableIcache
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableDcache
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableMMU
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableIcache
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableDcache
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ConfigSR
</UL>

<P><STRONG><a name="[41]"></a>CP15_WriteControl</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ARMVCT_high
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableWB
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableWB
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ConfigRR
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableMMU
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableIcache
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_EnableDcache
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableMMU
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableIcache
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_DisableDcache
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ConfigSR
</UL>

<P><STRONG><a name="[8e]"></a>CP15_ReadTTB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[3b]"></a>CP15_WriteTTB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
</UL>

<P><STRONG><a name="[8f]"></a>CP15_ReadDomainAccessControl</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[3c]"></a>CP15_WriteDomainAccessControl</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
</UL>

<P><STRONG><a name="[90]"></a>CP15_ReadDFSR</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[91]"></a>CP15_ReadIFSR</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[92]"></a>CP15_ReadFAR</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[93]"></a>CP15_InvalidateIDcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[4a]"></a>CP15_InvalidateIcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockIcache
</UL>

<P><STRONG><a name="[4e]"></a>CP15_InvalidateDcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockDcache
</UL>

<P><STRONG><a name="[94]"></a>CP15_PrefetchIcacheLine</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[52]"></a>CP15_TestCleanInvalidateDcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_TestCleanInvalidateDcache
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_TestCleanInvalidateDcache
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ShutdownDcache
</UL>

<P><STRONG><a name="[53]"></a>CP15_DrainWriteBuffer</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ShutdownDcache
</UL>

<P><STRONG><a name="[95]"></a>CP15_WaitForInterrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[54]"></a>CP15_InvalidateTLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_ShutdownDcache
</UL>

<P><STRONG><a name="[96]"></a>CP15_InvalidateTLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[97]"></a>CP15_InvalidateITLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[98]"></a>CP15_InvalidateITLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[99]"></a>CP15_InvalidateDTLB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[9a]"></a>CP15_InvalidateDTLBMVA</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[4f]"></a>CP15_ReadDcacheLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockDcache
</UL>

<P><STRONG><a name="[50]"></a>CP15_WriteDcacheLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockDcache
</UL>

<P><STRONG><a name="[4b]"></a>CP15_ReadIcacheLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockIcache
</UL>

<P><STRONG><a name="[4c]"></a>CP15_WriteIcacheLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15_LockIcache
</UL>

<P><STRONG><a name="[9b]"></a>CP15_ReadTLBLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[9c]"></a>CP15_WriteTLBLockdown</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[9d]"></a>CP15_ReadFCSE_PID</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[9e]"></a>CP15_WriteFCSE_PID</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[9f]"></a>CP15_ReadC5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[a0]"></a>CP15_ReadC6</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[a1]"></a>CP15ICacheDisable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[a2]"></a>CP15DCacheDisable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[a3]"></a>CP15ICacheEnable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[a4]"></a>CP15DCacheEnable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[a5]"></a>CP15DCacheFlush</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[55]"></a>CP15DCacheClean</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15DCacheClean
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP15DCacheClean
</UL>

<P><STRONG><a name="[a6]"></a>CP15ICacheFlush</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[a7]"></a>CP15ICacheFlushBuff</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[a8]"></a>CP15DCacheCleanBuff</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[a9]"></a>CP15TtbSet</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[aa]"></a>CP15MMUDisable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[ab]"></a>CP15MMUEnable</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cp15_asm.o(cp15), UNUSED)

<P><STRONG><a name="[1e]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[21]"></a>SetupAINTCInt</STRONG> (ARM, 48 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetupAINTCInt &rArr; PSCModuleControl
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSCModuleControl
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterIRQEnable
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIRQEnable
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntGlobalEnable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntFIQEnable
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntAINTCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (ARM, 24 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SystemInit &rArr; MMU_init &rArr; CP15_EnableDcache &rArr; CP15_IsMMUEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMU_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupAINTCInt
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBootInit
</UL>

<P><STRONG><a name="[2b]"></a>CopyVectorTable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBootInit
</UL>

<P><STRONG><a name="[6]"></a>IntDefaultHandler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
